"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@babel/core");
exports.default = (options) => {
    let babelImportPluginOptions = [];
    let onlyBuild = true;
    if (Array.isArray(options)) {
        babelImportPluginOptions = options;
    }
    else {
        babelImportPluginOptions = options.babelImportPluginOptions;
        onlyBuild = options.onlyBuild !== false;
    }
    /**
     * fast check and pass by code that does not contains libraryName
     */
    const codeIncludesLibraryName = (code) => !babelImportPluginOptions.every(({ libraryName }) => !new RegExp(`('${libraryName}')|("${libraryName}")`).test(code));
    let isBuild = false;
    const plugin = {
        name: 'modular-import',
        configResolved(config) {
            isBuild = config.command === 'build' || config.isProduction;
        },
        async transform(src) {
            if ((onlyBuild && !isBuild) || !codeIncludesLibraryName(src)) {
                return undefined;
            }
            const result = await core_1.transformAsync(src, {
                plugins: babelImportPluginOptions.map((mod) => ['import', mod, `import-${mod.libraryName}`]),
            });
            return result === null || result === void 0 ? void 0 : result.code;
        },
    };
    return plugin;
};
